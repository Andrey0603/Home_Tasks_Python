# Задание 1.
# Апгрейд калькулятора
# Степан использует калькулятор для расчёта суммы и разности чисел, но на  работе ему требуются не только обычные рифметические действия. Он ничего  не хочет делать вручную, поэтому решил немного расширить функционал  калькулятора.
# Напишите программу, запрашивающую у пользователя число и действие, которое нужно сделать с числом: вывести сумму его цифр, максимальную или  минимальную цифру. Каждое действие оформите в виде отдельной функции, а  основную программу зациклите.
# Запрошенные числа должны передаваться в функции суммы, максимума и  минимума при помощи аргументов.


def get_digits(num):
    """Возвращает список цифр числа."""
    digits = []
    while num > 0:
        digit = num % 10
        digits.append(digit)
        num //= 10
    return digits

def digits_summ(num):
    """Вычисляет сумму цифр числа."""
    digits = get_digits(num)
    return sum(digits)

def max_digit(num):
    """Находит максимальную цифру в числе."""
    digits = get_digits(num)
    return max(digits)

def min_digit(num):
    """Находит минимальную цифру в числе."""
    digits = get_digits(num)
    return min(digits)

while True:
    try:
        num = int(input('Введите число: '))
        action = int(input('Введите номер действия: 1 - сумма цифр, 2 - максимальная цифра, 3 - минимальная цифра: '))

        if action == 1:
            result = digits_summ(num)
            print('Сумма цифр:', result)
        elif action == 2:
            result = max_digit(num)
            print('Максимальная цифра:', result)
        elif action == 3:
            result = min_digit(num)
            print('Минимальная цифра:', result)
        else:
            print('Ошибка: неверная команда.')

    except ValueError:
        print('Ошибка: введите целое число.')
        
        
# Задача 2. 
# Недоделка
# Вы пришли на работу в компанию по разработке игр, целевая аудитория —
# дети и их родители. У предыдущего программиста было задание сделать две
# игры в одном приложении, чтобы пользователь мог выбирать одну из них.
# Однако программист, на место которого вы пришли, перед увольнением не
# успел выполнить эту задачу и оставил только небольшой шаблон проекта.
# Используя этот шаблон, реализуйте игры «Камень, ножницы, бумага» и «Угадай
# число».


import random 

def rock_paper_scissors():
    player = int(input("1 - камень, 2 - ножницы, 3 - бумага. Введите ваш выбор: "))

    computer = random.randint(1, 3) 
    print(f"Компьютер выбрал: {computer}")

    if player == computer:
        print("Ничья!")
    elif (player == 1 and computer == 2) or (player == 2 and computer == 3) or (player == 3 and computer == 1):
        print("Вы выиграли!")
    elif (player == 1 and computer == 3) or (player == 2 and computer == 1) or (player == 3 and computer == 2):
        print("Вы проиграли!")
    else:
        print("Неверная команда. Попробуйте снова.")

def guess_the_number():
    number = 7
    while True:
        try:
            guess_num = int(input('Введите число: '))
            if guess_num > number:
                print('Число больше, чем нужно. Попробуйте ещё раз!')
            elif guess_num < number:
                print('Число меньше, чем нужно. Попробуйте ещё раз!')
            else:
                print('Поздравляю, вы угадали! Возврат в главное меню.')
                break 
        except ValueError:
            print('Ошибка: Введите целое число.')

def main_menu():
    while True:
        print('Во что хотите поиграть?')
        try:
            game = int(input('1 - Камень, ножницы, бумага; 2 - Угадай число; 3 - Выйти: '))
            if game == 1:
                rock_paper_scissors()
            elif game == 2:
                guess_the_number()
            elif game == 3:
                print('Выход из программы.')
                break
            else:
                print('Неверная команда. Попробуйте снова.')
        except ValueError:
            print('Ошибка: Введите целое число.')

main_menu()


# Задача 3. 
# Число наоборот
# Пользователь вводит два числа: N и K. Напишите программу, которая заменяет
# каждое число на число, которое получается из исходного записью его цифр в
# обратном порядке, затем складывает их, снова переворачивает и выводит
# ответ на экран.

def reversal(x):

    count = 0
    revers_x = 0


    for _ in str(x):
        count += 1

    while x > 0:

        count -= 1

    revers_x += (x % 10) * (10 ** count)

    x = x // 10

    return revers_x

num_1 = int(input('Введите первое число: '))

num_2 = int(input('Введите второе число: '))

revers_num1 = reversal(num_1)

revers_num2 = reversal(num_2)

print('\nПервое число наоборот:', revers_num1)

print('Второе число наоборот:', revers_num2)

amount = revers_num1 + revers_num2

revers_summ = reversal(amount)

print('\nСумма:', amount)

print('Сумма наоборот:', revers_summ)


# Задача 4.
# Функция максимума
# Юра пишет различные полезные функции для Python, чтобы остальным
# программистам стало проще работать. Он захотел написать функцию, которая
# будет находить максимум из перечисленных чисел. Функция для нахождения
# максимума из двух чисел у него уже есть. Юра задумался: может быть, её
# можно как-то использовать для нахождения максимума уже от трёх чисел?
# Помогите Юре написать программу, которая находит максимум из трёх чисел.
# Для этого используйте только функцию нахождения максимума из двух чисел.

def max_of_2(number_1, number_2):

    if number_1 > number_2:
        return number_1
        return number_2
def max_of_3(number_1, number_2, number_3):

    return max_of_2(max_of_2(number_1, number_2), number_3)

digit_1 = int(input('Введите первое число: '))
digit_2 = int(input('Введите второе число: '))
digit_3 = int(input('Введите третье число: '))

print('Самое большое число:', max_of_3(digit_1, digit_2, digit_3))


# Задача 5. 
# Яйца
# В рамках программы колонизации Марса компания «Спейс Инжиниринг»
# вывела особую породу черепах, которые, по задумке, должны размножаться,
# откладывая яйца в марсианском грунте. Откладывать яйца слишком близко к
# поверхности опасно из-за радиации, а слишком глубоко — из-за давления
# грунта и недостатка кислорода. Вообще, факторов очень много, но
# специалисты проделали большую работу и предположили, что уровень
# опасности для черепашьих яиц рассчитывается по формуле: D = x^3 − 3x^2 −
# 12x + 10, где x — глубина кладки в метрах, а D — уровень опасности в
# условных единицах. Для тестирования гипотезы нужно взять пробу грунта на
# безопасной, согласно формуле, глубине.
# Напишите программу, находящую такое значение глубины х, при котором
# уровень опасности как можно более близок к нулю. На вход программе
# подаётся максимально допустимое отклонение уровня опасности от нуля, а
# программа должна рассчитать приблизительное значение х, удовлетворяющее
# этому отклонению. Известно, что глубина точно больше нуля и меньше четырёх
# метров. Обеспечьте контроль ввода.


def calculate_danger(x):

    return x ** 3 - 3 * x ** 2 - 12 * x + 10
def find_safe_depth(max_danger):

    d_min = 0
    d_max = 4
    d_middle = (d_min + d_max) / 2
    middle_danger = calculate_danger(d_middle)
    while abs(middle_danger) > max_danger:
        if middle_danger > 0:
            d_min = d_middle
        else:
            d_max = d_middle
            d_middle = (d_min + d_max) / 2
            middle_danger = calculate_danger(d_middle)
    return d_middle
def main():

    max_danger = float(input('Введите допустимый уровень опасности:'))
    if max_danger < 0:
        print('Вы ввели недопустимое значение! Попробуйте еще раз.')
    else:
        safe_depth = find_safe_depth(max_danger)
    print(f'Приблизительная глубина безопасной кладки: {safe_depth:.9f} м')
main()
